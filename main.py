import telebot
import os
import sqlite3
import json
from dotenv import load_dotenv
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(API_TOKEN)

def get_teams():
    connection = sqlite3.connect('teams.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM teams')
    rows = cursor.fetchall()
    connection.close()
    teams = []
    for row in rows:
        teams.append({
            "id": row[0],
            "number": row[1],
            "captain": row[2],
            "members": json.loads(row[3])
        })
    return teams

teams = get_teams()
current_team_number = 0

def redirect_message(message, redirect_text):
    sent_message = bot.send_message(message.chat.id, redirect_text, reply_markup=ReplyKeyboardRemove())  
    bot.delete_message(message.chat.id, sent_message.id)

@bot.message_handler(commands=['start'])
def choose_action(message):
    redirect_message(message, "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    reply_markup = ReplyKeyboardMarkup(row_width=1)
    join_team = KeyboardButton("üë• –ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ")
    view_teams = KeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")
    my_team = KeyboardButton("üßë‚Äçüíª –ú–æ—è –∫–æ–º–∞–Ω–¥–∞")
    reply_markup.add(join_team, view_teams, my_team)
    bot.send_message(message.chat.id, "üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ", reply_markup=reply_markup)

@bot.message_handler(func=lambda message: message.text.strip() in ["üë• –ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ", "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥", "‚õî –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"])
def handle_action(message):
    redirect_message(message, "–§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥...")
    if message.text == "üë• –ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ" or message.text == "‚õî –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        markup = InlineKeyboardMarkup()
        for i, team in enumerate(teams):
            team_name = f"{team['number']} –ö–æ–º–∞–Ω–¥–∞: {team['captain']}" if team['captain'] else f"{team['number']} –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞"
            markup.add(InlineKeyboardButton(team_name, callback_data=f"team{i+1}"))
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
        bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ", reply_markup=markup)
    elif message.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥":
        team_list = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥: \n\n"
        for team in teams:
            if team['members']:
                members_list = "\n".join([f"{i+1}. {member}" for i, member in enumerate(team['members'])])
            else:
                members_list = "–ü—É—Å—Ç–æ ü§∑‚Äç‚ôÇÔ∏è"   
            team_list += f"{team['number']} –ö–æ–º–∞–Ω–¥–∞:\n{members_list} \n\n"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
        bot.send_message(message.chat.id, team_list, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "back")
def choose_action_callback(call):
    choose_action(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('team'))
def handle_team_selection(call):
    redirect_message(call.message, "–§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã...")
    global current_team_number
    current_team_number = int(call.data.replace('team', '')) - 1
    team = teams[current_team_number]
    if team['members']:
        members_list = "\n".join([f"{i+1}. {member}" for i, member in enumerate(team['members'])])
    else:
        members_list = "–ü—É—Å—Ç–æ ü§∑‚Äç‚ôÇÔ∏è"
    team_members_message = f"{team['number']} –ö–æ–º–∞–Ω–¥–∞:\n{members_list} \n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ?"
    reply_markup = ReplyKeyboardMarkup(row_width=1)
    join_team = KeyboardButton("üëå –î–∞, –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è!")
    view_teams = KeyboardButton("‚õî –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
    reply_markup.add(join_team, view_teams)
    bot.answer_callback_query(call.id, team_members_message)
    bot.send_message(call.message.chat.id, team_members_message, reply_markup=reply_markup)

def user_exists_in_any_team(user):
    teams = get_teams()
    for team in teams:
        if user in team['members']:
            return True
    return False

@bot.message_handler(func=lambda message: message.text == "üëå –î–∞, –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è!")
def join_team(message):
    redirect_message(message, "–î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É...")
    if message.from_user.username:
        user = "@" + message.from_user.username
    else: 
        user = message.from_user.first_name + message.from_user.last_name

    user_in_team = user_exists_in_any_team(user)
    
    if user_in_team:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥!")
    else:
        team = teams[current_team_number]
        print(current_team_number)
        if user not in team['members']:
            team['members'].append(user)
            connection = sqlite3.connect('teams.db')
            cursor = connection.cursor()
            cursor.execute('UPDATE teams SET members = ? WHERE id = ?', (json.dumps(team['members']), team['id']))
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!")
        else:
            bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")



bot.infinity_polling()
